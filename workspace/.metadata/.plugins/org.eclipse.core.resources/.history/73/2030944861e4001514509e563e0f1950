/**
 */
package bpmn.provider;

import bpmn.util.BpmnAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BpmnItemProviderAdapterFactory extends BpmnAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BpmnItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.ComplexGateway} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexGatewayItemProvider complexGatewayItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.ComplexGateway}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexGatewayAdapter() {
		if (complexGatewayItemProvider == null) {
			complexGatewayItemProvider = new ComplexGatewayItemProvider(this);
		}

		return complexGatewayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.ReceiveTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReceiveTaskItemProvider receiveTaskItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.ReceiveTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReceiveTaskAdapter() {
		if (receiveTaskItemProvider == null) {
			receiveTaskItemProvider = new ReceiveTaskItemProvider(this);
		}

		return receiveTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.ManualTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManualTaskItemProvider manualTaskItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.ManualTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManualTaskAdapter() {
		if (manualTaskItemProvider == null) {
			manualTaskItemProvider = new ManualTaskItemProvider(this);
		}

		return manualTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Pool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PoolItemProvider poolItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Pool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPoolAdapter() {
		if (poolItemProvider == null) {
			poolItemProvider = new PoolItemProvider(this);
		}

		return poolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.NFRSoftgoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFRSoftgoalItemProvider nfrSoftgoalItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.NFRSoftgoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFRSoftgoalAdapter() {
		if (nfrSoftgoalItemProvider == null) {
			nfrSoftgoalItemProvider = new NFRSoftgoalItemProvider(this);
		}

		return nfrSoftgoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.InclusiveGateway} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InclusiveGatewayItemProvider inclusiveGatewayItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.InclusiveGateway}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInclusiveGatewayAdapter() {
		if (inclusiveGatewayItemProvider == null) {
			inclusiveGatewayItemProvider = new InclusiveGatewayItemProvider(this);
		}

		return inclusiveGatewayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.SomePlus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SomePlusItemProvider somePlusItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.SomePlus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSomePlusAdapter() {
		if (somePlusItemProvider == null) {
			somePlusItemProvider = new SomePlusItemProvider(this);
		}

		return somePlusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.ANDDecomposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ANDDecompositionItemProvider andDecompositionItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.ANDDecomposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createANDDecompositionAdapter() {
		if (andDecompositionItemProvider == null) {
			andDecompositionItemProvider = new ANDDecompositionItemProvider(this);
		}

		return andDecompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.ClaimSoftgoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClaimSoftgoalItemProvider claimSoftgoalItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.ClaimSoftgoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClaimSoftgoalAdapter() {
		if (claimSoftgoalItemProvider == null) {
			claimSoftgoalItemProvider = new ClaimSoftgoalItemProvider(this);
		}

		return claimSoftgoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.ParallelGateway} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelGatewayItemProvider parallelGatewayItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.ParallelGateway}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelGatewayAdapter() {
		if (parallelGatewayItemProvider == null) {
			parallelGatewayItemProvider = new ParallelGatewayItemProvider(this);
		}

		return parallelGatewayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.ExclusiveGateway} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExclusiveGatewayItemProvider exclusiveGatewayItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.ExclusiveGateway}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExclusiveGatewayAdapter() {
		if (exclusiveGatewayItemProvider == null) {
			exclusiveGatewayItemProvider = new ExclusiveGatewayItemProvider(this);
		}

		return exclusiveGatewayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Lane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LaneItemProvider laneItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Lane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLaneAdapter() {
		if (laneItemProvider == null) {
			laneItemProvider = new LaneItemProvider(this);
		}

		return laneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.SendTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SendTaskItemProvider sendTaskItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.SendTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSendTaskAdapter() {
		if (sendTaskItemProvider == null) {
			sendTaskItemProvider = new SendTaskItemProvider(this);
		}

		return sendTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.OperationalizingSoftgoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationalizingSoftgoalItemProvider operationalizingSoftgoalItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.OperationalizingSoftgoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationalizingSoftgoalAdapter() {
		if (operationalizingSoftgoalItemProvider == null) {
			operationalizingSoftgoalItemProvider = new OperationalizingSoftgoalItemProvider(this);
		}

		return operationalizingSoftgoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.SomeMinus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SomeMinusItemProvider someMinusItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.SomeMinus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSomeMinusAdapter() {
		if (someMinusItemProvider == null) {
			someMinusItemProvider = new SomeMinusItemProvider(this);
		}

		return someMinusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Help} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HelpItemProvider helpItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Help}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHelpAdapter() {
		if (helpItemProvider == null) {
			helpItemProvider = new HelpItemProvider(this);
		}

		return helpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.BusinessRulesTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessRulesTaskItemProvider businessRulesTaskItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.BusinessRulesTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessRulesTaskAdapter() {
		if (businessRulesTaskItemProvider == null) {
			businessRulesTaskItemProvider = new BusinessRulesTaskItemProvider(this);
		}

		return businessRulesTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Annotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationItemProvider annotationItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Annotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationAdapter() {
		if (annotationItemProvider == null) {
			annotationItemProvider = new AnnotationItemProvider(this);
		}

		return annotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Hurt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HurtItemProvider hurtItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Hurt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHurtAdapter() {
		if (hurtItemProvider == null) {
			hurtItemProvider = new HurtItemProvider(this);
		}

		return hurtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.SequenceFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceFlowItemProvider sequenceFlowItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.SequenceFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceFlowAdapter() {
		if (sequenceFlowItemProvider == null) {
			sequenceFlowItemProvider = new SequenceFlowItemProvider(this);
		}

		return sequenceFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.EQLDecomposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EQLDecompositionItemProvider eqlDecompositionItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.EQLDecomposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEQLDecompositionAdapter() {
		if (eqlDecompositionItemProvider == null) {
			eqlDecompositionItemProvider = new EQLDecompositionItemProvider(this);
		}

		return eqlDecompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Break} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BreakItemProvider breakItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Break}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBreakAdapter() {
		if (breakItemProvider == null) {
			breakItemProvider = new BreakItemProvider(this);
		}

		return breakItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.BPMNRootElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BPMNRootElementItemProvider bpmnRootElementItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.BPMNRootElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBPMNRootElementAdapter() {
		if (bpmnRootElementItemProvider == null) {
			bpmnRootElementItemProvider = new BPMNRootElementItemProvider(this);
		}

		return bpmnRootElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Make} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MakeItemProvider makeItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Make}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMakeAdapter() {
		if (makeItemProvider == null) {
			makeItemProvider = new MakeItemProvider(this);
		}

		return makeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.UserTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserTaskItemProvider userTaskItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.UserTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserTaskAdapter() {
		if (userTaskItemProvider == null) {
			userTaskItemProvider = new UserTaskItemProvider(this);
		}

		return userTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.ORDecomposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORDecompositionItemProvider orDecompositionItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.ORDecomposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createORDecompositionAdapter() {
		if (orDecompositionItemProvider == null) {
			orDecompositionItemProvider = new ORDecompositionItemProvider(this);
		}

		return orDecompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.ServiceTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceTaskItemProvider serviceTaskItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.ServiceTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceTaskAdapter() {
		if (serviceTaskItemProvider == null) {
			serviceTaskItemProvider = new ServiceTaskItemProvider(this);
		}

		return serviceTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.UndesirableSituation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UndesirableSituationItemProvider undesirableSituationItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.UndesirableSituation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUndesirableSituationAdapter() {
		if (undesirableSituationItemProvider == null) {
			undesirableSituationItemProvider = new UndesirableSituationItemProvider(this);
		}

		return undesirableSituationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.UndesirableOperationalization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UndesirableOperationalizationItemProvider undesirableOperationalizationItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.UndesirableOperationalization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUndesirableOperationalizationAdapter() {
		if (undesirableOperationalizationItemProvider == null) {
			undesirableOperationalizationItemProvider = new UndesirableOperationalizationItemProvider(this);
		}

		return undesirableOperationalizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.CausalAttribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CausalAttributionItemProvider causalAttributionItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.CausalAttribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCausalAttributionAdapter() {
		if (causalAttributionItemProvider == null) {
			causalAttributionItemProvider = new CausalAttributionItemProvider(this);
		}

		return causalAttributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.MessageFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageFlowItemProvider messageFlowItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.MessageFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageFlowAdapter() {
		if (messageFlowItemProvider == null) {
			messageFlowItemProvider = new MessageFlowItemProvider(this);
		}

		return messageFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.SubProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubProcessItemProvider subProcessItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.SubProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubProcessAdapter() {
		if (subProcessItemProvider == null) {
			subProcessItemProvider = new SubProcessItemProvider(this);
		}

		return subProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Message} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageItemProvider messageItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Message}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageAdapter() {
		if (messageItemProvider == null) {
			messageItemProvider = new MessageItemProvider(this);
		}

		return messageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Timer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimerItemProvider timerItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Timer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimerAdapter() {
		if (timerItemProvider == null) {
			timerItemProvider = new TimerItemProvider(this);
		}

		return timerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Error} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorItemProvider errorItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Error}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorAdapter() {
		if (errorItemProvider == null) {
			errorItemProvider = new ErrorItemProvider(this);
		}

		return errorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.Multiple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultipleItemProvider multipleItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.Multiple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultipleAdapter() {
		if (multipleItemProvider == null) {
			multipleItemProvider = new MultipleItemProvider(this);
		}

		return multipleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.StartEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartEventItemProvider startEventItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.StartEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartEventAdapter() {
		if (startEventItemProvider == null) {
			startEventItemProvider = new StartEventItemProvider(this);
		}

		return startEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.BoundaryEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoundaryEventItemProvider boundaryEventItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.BoundaryEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoundaryEventAdapter() {
		if (boundaryEventItemProvider == null) {
			boundaryEventItemProvider = new BoundaryEventItemProvider(this);
		}

		return boundaryEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.None} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoneItemProvider noneItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.None}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoneAdapter() {
		if (noneItemProvider == null) {
			noneItemProvider = new NoneItemProvider(this);
		}

		return noneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.EndEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndEventItemProvider endEventItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.EndEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndEventAdapter() {
		if (endEventItemProvider == null) {
			endEventItemProvider = new EndEventItemProvider(this);
		}

		return endEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.EvenbasedGateway} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvenbasedGatewayItemProvider evenbasedGatewayItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.EvenbasedGateway}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvenbasedGatewayAdapter() {
		if (evenbasedGatewayItemProvider == null) {
			evenbasedGatewayItemProvider = new EvenbasedGatewayItemProvider(this);
		}

		return evenbasedGatewayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.DataInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataInputItemProvider dataInputItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.DataInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataInputAdapter() {
		if (dataInputItemProvider == null) {
			dataInputItemProvider = new DataInputItemProvider(this);
		}

		return dataInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.DataOutput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataOutputItemProvider dataOutputItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.DataOutput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataOutputAdapter() {
		if (dataOutputItemProvider == null) {
			dataOutputItemProvider = new DataOutputItemProvider(this);
		}

		return dataOutputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.IntermediateCatchEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntermediateCatchEventItemProvider intermediateCatchEventItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.IntermediateCatchEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntermediateCatchEventAdapter() {
		if (intermediateCatchEventItemProvider == null) {
			intermediateCatchEventItemProvider = new IntermediateCatchEventItemProvider(this);
		}

		return intermediateCatchEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.IntermediateEndEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntermediateEndEventItemProvider intermediateEndEventItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.IntermediateEndEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntermediateEndEventAdapter() {
		if (intermediateEndEventItemProvider == null) {
			intermediateEndEventItemProvider = new IntermediateEndEventItemProvider(this);
		}

		return intermediateEndEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bpmn.DataAssociation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataAssociationItemProvider dataAssociationItemProvider;

	/**
	 * This creates an adapter for a {@link bpmn.DataAssociation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAssociationAdapter() {
		if (dataAssociationItemProvider == null) {
			dataAssociationItemProvider = new DataAssociationItemProvider(this);
		}

		return dataAssociationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (complexGatewayItemProvider != null) complexGatewayItemProvider.dispose();
		if (receiveTaskItemProvider != null) receiveTaskItemProvider.dispose();
		if (manualTaskItemProvider != null) manualTaskItemProvider.dispose();
		if (poolItemProvider != null) poolItemProvider.dispose();
		if (nfrSoftgoalItemProvider != null) nfrSoftgoalItemProvider.dispose();
		if (inclusiveGatewayItemProvider != null) inclusiveGatewayItemProvider.dispose();
		if (somePlusItemProvider != null) somePlusItemProvider.dispose();
		if (andDecompositionItemProvider != null) andDecompositionItemProvider.dispose();
		if (claimSoftgoalItemProvider != null) claimSoftgoalItemProvider.dispose();
		if (parallelGatewayItemProvider != null) parallelGatewayItemProvider.dispose();
		if (exclusiveGatewayItemProvider != null) exclusiveGatewayItemProvider.dispose();
		if (laneItemProvider != null) laneItemProvider.dispose();
		if (sendTaskItemProvider != null) sendTaskItemProvider.dispose();
		if (groupItemProvider != null) groupItemProvider.dispose();
		if (operationalizingSoftgoalItemProvider != null) operationalizingSoftgoalItemProvider.dispose();
		if (someMinusItemProvider != null) someMinusItemProvider.dispose();
		if (helpItemProvider != null) helpItemProvider.dispose();
		if (businessRulesTaskItemProvider != null) businessRulesTaskItemProvider.dispose();
		if (annotationItemProvider != null) annotationItemProvider.dispose();
		if (hurtItemProvider != null) hurtItemProvider.dispose();
		if (sequenceFlowItemProvider != null) sequenceFlowItemProvider.dispose();
		if (eqlDecompositionItemProvider != null) eqlDecompositionItemProvider.dispose();
		if (breakItemProvider != null) breakItemProvider.dispose();
		if (bpmnRootElementItemProvider != null) bpmnRootElementItemProvider.dispose();
		if (makeItemProvider != null) makeItemProvider.dispose();
		if (userTaskItemProvider != null) userTaskItemProvider.dispose();
		if (orDecompositionItemProvider != null) orDecompositionItemProvider.dispose();
		if (serviceTaskItemProvider != null) serviceTaskItemProvider.dispose();
		if (undesirableSituationItemProvider != null) undesirableSituationItemProvider.dispose();
		if (undesirableOperationalizationItemProvider != null) undesirableOperationalizationItemProvider.dispose();
		if (causalAttributionItemProvider != null) causalAttributionItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (messageFlowItemProvider != null) messageFlowItemProvider.dispose();
		if (subProcessItemProvider != null) subProcessItemProvider.dispose();
		if (messageItemProvider != null) messageItemProvider.dispose();
		if (timerItemProvider != null) timerItemProvider.dispose();
		if (errorItemProvider != null) errorItemProvider.dispose();
		if (multipleItemProvider != null) multipleItemProvider.dispose();
		if (startEventItemProvider != null) startEventItemProvider.dispose();
		if (boundaryEventItemProvider != null) boundaryEventItemProvider.dispose();
		if (noneItemProvider != null) noneItemProvider.dispose();
		if (endEventItemProvider != null) endEventItemProvider.dispose();
		if (evenbasedGatewayItemProvider != null) evenbasedGatewayItemProvider.dispose();
		if (dataInputItemProvider != null) dataInputItemProvider.dispose();
		if (dataOutputItemProvider != null) dataOutputItemProvider.dispose();
		if (intermediateCatchEventItemProvider != null) intermediateCatchEventItemProvider.dispose();
		if (intermediateEndEventItemProvider != null) intermediateEndEventItemProvider.dispose();
		if (dataAssociationItemProvider != null) dataAssociationItemProvider.dispose();
	}

}
