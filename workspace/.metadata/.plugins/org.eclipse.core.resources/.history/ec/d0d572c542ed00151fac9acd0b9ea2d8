package jfacetutorial;

import java.lang.annotation.Retention;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import jfacetutorial.model.DataModel;
import jfacetutorial.model.SoftGoal;

import org.eclipse.core.runtime.IPath;
import org.eclipse.emf.common.command.Command;
import org.eclipse.emf.common.command.CommandStack;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.edit.command.AddCommand;
import org.eclipse.emf.edit.command.SetCommand;
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.emf.transaction.RecordingCommand;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.StatusLineManager;
import org.eclipse.jface.action.ToolBarManager;
import org.eclipse.jface.window.ApplicationWindow;
import org.eclipse.sirius.business.api.session.Session;
import org.eclipse.sirius.business.api.session.SessionManager;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.TraverseEvent;
import org.eclipse.swt.events.TraverseListener;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.jface.viewers.CellLabelProvider;
import org.eclipse.jface.viewers.CheckStateChangedEvent;
import org.eclipse.jface.viewers.CheckboxCellEditor;
import org.eclipse.jface.viewers.ColumnViewerEditor;
import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;
import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;
import org.eclipse.jface.viewers.EditingSupport;
import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;
import org.eclipse.jface.viewers.ICheckStateListener;
import org.eclipse.jface.viewers.TextCellEditor;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.TreeViewerColumn;
import org.eclipse.jface.viewers.TreeViewerFocusCellManager;
import org.eclipse.jface.viewers.TreeViewerEditor;
import org.eclipse.jface.viewers.ViewerCell;
import org.eclipse.jface.viewers.ViewerRow;
import org.eclipse.swt.widgets.TreeColumn;
import org.eclipse.jface.viewers.CheckboxTreeViewer;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FillLayout;

import bpmn.BPMNRootElement;
import bpmn.BpmnFactory;
import bpmn.BpmnPackage;
import bpmn.NFRSoftsolution;
import bpmn.impl.NFRSoftsolutionImpl;
import bpmn.impl.BpmnPackageImpl;
import bpmn.presentation.BpmnEditor;
import bpmn.provider.BpmnItemProviderAdapterFactory;

import java.util.ArrayList;


public class SoftGoalApplication extends ApplicationWindow {
	private FormData fd_composite_1;
	
	//2/2/2016
	private ArrayList<SoftGoal> selected_sfg_list;
	 
	/**
	 * Create the application window.
	 */
	public SoftGoalApplication() {
		super(null);
		createActions();
		addToolBar(SWT.FLAT | SWT.WRAP);
		addMenuBar();
		addStatusLine();
		
		//2/2/2016
		selected_sfg_list=new ArrayList<SoftGoal>();
	}

	/**
	 * Create contents of the application window.
	 * @param parent
	 */
	@Override
	protected Control createContents(Composite parent) {
		Composite container = new Composite(parent, SWT.NONE);
		container.setLayout(new FormLayout());
		
		{
			Composite composite = new Composite(container, SWT.NONE);
			composite.setLayout(new FillLayout(SWT.HORIZONTAL));
			fd_composite_1 = new FormData();
			fd_composite_1.top = new FormAttachment(0);
			fd_composite_1.left = new FormAttachment(0);
			composite.setLayoutData(fd_composite_1);
			
			//2/2/2016-block1-add SWT.FULL_SELECTION for all cells selection
			CheckboxTreeViewer treeViewer = new CheckboxTreeViewer(composite, SWT.BORDER | SWT.FULL_SELECTION);
			
			//2/2/2016-block2-start-add select one cell each time
			final TreeViewerFocusCellManager mgr = new TreeViewerFocusCellManager(treeViewer,new FocusCellOwnerDrawHighlighter(treeViewer));
			ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(treeViewer) {
				@Override
				protected boolean isEditorActivationEvent(
						ColumnViewerEditorActivationEvent event) {
					return event.eventType == ColumnViewerEditorActivationEvent.TRAVERSAL
							|| event.eventType == ColumnViewerEditorActivationEvent.MOUSE_DOUBLE_CLICK_SELECTION
							|| (event.eventType == ColumnViewerEditorActivationEvent.KEY_PRESSED && ( event.keyCode == SWT.CR || event.character == ' ' ))
							|| event.eventType == ColumnViewerEditorActivationEvent.PROGRAMMATIC;
				}
			};
			
			TreeViewerEditor.create(treeViewer, mgr, actSupport, ColumnViewerEditor.TABBING_HORIZONTAL
					| ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR
					| ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.KEYBOARD_ACTIVATION);
			//2/2/2016-block2-end
			
			//2/2/2016-block3-start
//			final TextCellEditor textCellEditor = new TextCellEditor(treeViewer.getTree());
//			final CheckboxCellEditor checkboxCellEditor = new CheckboxCellEditor(treeViewer.getTree());
			//2/2/2016-block3-end
			
			Tree tree = treeViewer.getTree();
			tree.setLinesVisible(true);
			tree.setHeaderVisible(true);
			{
				TreeColumn trclmnSoftgoal = new TreeColumn(tree, SWT.NONE);
				trclmnSoftgoal.setWidth(135);
				trclmnSoftgoal.setText("SoftGoal");
				
			}
			{
				TreeColumn trclmnSgSatisficedType = new TreeColumn(tree, SWT.NONE);
				trclmnSgSatisficedType.setWidth(149);
				trclmnSgSatisficedType.setText("SoftGoal Satisficed Type");
			}
			{
				TreeColumn trclmnSubsoftgoal = new TreeColumn(tree, SWT.NONE);
				trclmnSubsoftgoal.setWidth(148);
				trclmnSubsoftgoal.setText("Sub-SoftGoal");
			}
			{
				TreeColumn trclmnNewColumn = new TreeColumn(tree, SWT.NONE);
				trclmnNewColumn.setWidth(177);
				trclmnNewColumn.setText("Sub-SoftGoal Satisficed Type");
			}
			
			//2/2/2016-block4-start
//			{
//			TreeViewerColumn column = new TreeViewerColumn(treeViewer, SWT.NONE);
//			column.getColumn().setWidth(135);
//			column.getColumn().setMoveable(true);
//			column.getColumn().setText("SoftGoal--");
//			column.setLabelProvider(new CellLabelProvider() {
//
////				public String getText(Object element) {
////					return "Column 1 => " + element.toString();
////				}
//
//				@Override
//				public void update(ViewerCell cell) {
//					// TODO Auto-generated method stub
//					
//				}
//
//			});
//			
//			column.setEditingSupport(new EditingSupport(treeViewer) {
//				@Override
//				protected boolean canEdit(Object element) {
//					return false;
//				}
//
//				@Override
//				protected CellEditor getCellEditor(Object element) {
//					return textCellEditor;
//				}
//
//				@Override
//				protected Object getValue(Object element) {
//					return ((SoftGoal) element).counter + "";
//				}
//
//				@Override
//				protected void setValue(Object element, Object value) {
//					((SoftGoal) element).counter = Integer.parseInt(value.toString());
//					treeViewer.update(element, null);
//				}
//			});
//
//			}
			//2/2/2016-block4-end
			
			
			//Manually add Tree TableContent Label Provider
			SoftGoalTreeTableCLProvider provider=new SoftGoalTreeTableCLProvider();
			treeViewer.setContentProvider(provider);
			treeViewer.setLabelProvider(provider);
			//Manually add SoftGoal Objects
			treeViewer.setInput(DataModel.getSoftGoals());
	        
			
			//2/2/2016--block5-start
//			treeViewer.getControl().addTraverseListener(new TraverseListener() {
//
//				@Override
//				public void keyTraversed(TraverseEvent e) {
//					if( (e.detail == SWT.TRAVERSE_TAB_NEXT || e.detail == SWT.TRAVERSE_TAB_PREVIOUS) && mgr.getFocusCell().getColumnIndex() == 2 ) {
//						ColumnViewerEditor editor = treeViewer.getColumnViewerEditor();
//						ViewerCell cell = mgr.getFocusCell();
//
//						try {
//							Method m = ColumnViewerEditor.class.getDeclaredMethod("processTraverseEvent", new Class[] {int.class,ViewerRow.class,TraverseEvent.class});
//							m.setAccessible(true);
//							m.invoke(editor, new Object[] { new Integer(cell.getColumnIndex()), cell.getViewerRow(), e });
//						} catch (SecurityException e1) {
//							// TODO Auto-generated catch block
//							e1.printStackTrace();
//						} catch (NoSuchMethodException e1) {
//							// TODO Auto-generated catch block
//							e1.printStackTrace();
//						} catch (IllegalArgumentException e1) {
//							// TODO Auto-generated catch block
//							e1.printStackTrace();
//						} catch (IllegalAccessException e1) {
//							// TODO Auto-generated catch block
//							e1.printStackTrace();
//						} catch (InvocationTargetException e1) {
//							// TODO Auto-generated catch block
//							e1.printStackTrace();
//						}
//					}
//				}
//
//			});
			//2/2/2016--block5-end
			
			//2/2/2016--block6- checked box event listener and handle -start
			treeViewer.addCheckStateListener(new ICheckStateListener(){

				@Override
				public void checkStateChanged(CheckStateChangedEvent event) {
					if(event.getChecked()){
						selected_sfg_list.add((SoftGoal)event.getElement());
						//System.out.println(String.valueOf(event.getChecked()));
					}else{
						selected_sfg_list.remove(event.getElement());						
					}
				}
				
			});
			//2/2/2016--block6-end
		}
		
		
		
		{
			Composite composite = new Composite(container, SWT.NONE);
			fd_composite_1.bottom = new FormAttachment(composite, -6);
			FormData fd_composite = new FormData();
			fd_composite.bottom = new FormAttachment(0, 243);
			fd_composite.right = new FormAttachment(0, 612);
			fd_composite.top = new FormAttachment(0, 198);
			fd_composite.left = new FormAttachment(0);
			composite.setLayoutData(fd_composite);
			
			{
			Button btnNewButton = new Button(composite, SWT.NONE);
			btnNewButton.setSelection(true);
			
			//2/2/2016--block7- OK button event listener and handle -start
			btnNewButton.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {
					for(int i=0;i<selected_sfg_list.size();i++){
						System.out.println(selected_sfg_list.get(i).getName());						
					}
					System.out.println("----------");
					
					
					//NFRSoftgoal nfr_sfg_emf=new NFRSoftgoalImpl();
					NFRSoftsolution nfr_sfg_emf=BpmnFactory.eINSTANCE.createNFRSoftsolution();
					nfr_sfg_emf.setName("NFR_JFace");
					System.out.println(nfr_sfg_emf.getName());
					
					EditingDomain editingDomain = AdapterFactoryEditingDomain.getEditingDomainFor(
							BpmnPackage.eINSTANCE.getBPMNRootElement());
					//EditingDomain editingDomain = AdapterFactoryEditingDomain.getEditingDomainFor(BpmnPackageImpl.init().getBPMNRootElement());		
						Command command = AddCommand.create(editingDomain, BpmnPackage.eINSTANCE.getBPMNRootElement(), 
								BpmnPackage.eINSTANCE.getBPMNRootElement_PhenomenonMembers(),nfr_sfg_emf );		
						editingDomain.getCommandStack().execute(command);		
						
						BpmnItemProviderAdapterFactory bpmn_ipaf=new BpmnItemProviderAdapterFactory();
						bpmn_ipaf.createNFRSoftsolutionAdapter();
						  AdapterFactoryLabelProvider labelProvider =new AdapterFactoryLabelProvider(bpmn_ipaf.getRootAdapterFactory());
						  AdapterFactoryContentProvider contentProvider =new AdapterFactoryContentProvider(bpmn_ipaf.getRootAdapterFactory());
//						  treeViewer.setLabelProvider(labelProvider);
//						  treeViewer.setContentProvider(contentProvider);
//						  treeViewer.setInput(getTournament());

				}
			});
			//2/2/2016--block7-end		
			btnNewButton.setBounds(120, 10, 75, 25);
			btnNewButton.setText(" OK ");
			}
			
			{
				Button btnCancel = new Button(composite, SWT.NONE);
				btnCancel.setSelection(true);
				btnCancel.setBounds(374, 10, 75, 25);
				btnCancel.setText("Cancel");
			}
		}

		return container;
	}

	/**
	 * Create the actions.
	 */
	private void createActions() {
		// Create the actions
	}

	/**
	 * Create the menu manager.
	 * @return the menu manager
	 */
	@Override
	protected MenuManager createMenuManager() {
		MenuManager menuManager = new MenuManager("menu");
		return menuManager;
	}

	/**
	 * Create the toolbar manager.
	 * @return the toolbar manager
	 */
	@Override
	protected ToolBarManager createToolBarManager(int style) {
		ToolBarManager toolBarManager = new ToolBarManager(style);
		return toolBarManager;
	}

	/**
	 * Create the status line manager.
	 * @return the status line manager
	 */
	@Override
	protected StatusLineManager createStatusLineManager() {
		StatusLineManager statusLineManager = new StatusLineManager();
		return statusLineManager;
	}
	
	public ArrayList<SoftGoal> getSelectedSoftGoalList(){
		return selected_sfg_list;
	}		

	/**
	 * Launch the application.
	 * @param args
	 */
	public static void main(String args[]) {
		try {
			SoftGoalApplication window = new SoftGoalApplication();
			window.setBlockOnOpen(true);
			window.open();
			Display.getCurrent().dispose();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Configure the shell.
	 * @param newShell
	 */
	@Override
	protected void configureShell(Shell newShell) {
//		this.shlTreeTableViewer=newShell;
		super.configureShell(newShell);
		newShell.setText("Soft Goal Application");
	}

	/**
	 * Return the initial size of the window.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(628, 355);
	}
}
